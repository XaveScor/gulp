const Undertaker = require('./src/undertaker');
const vfs = require('vinyl-fs');
const watch = require('glob-watcher');

class Gulp extends Undertaker {
  task = this.task.bind(this);
  series = this.series.bind(this);
  parallel = this.parallel.bind(this);
  registry = this.registry.bind(this);
  tree = this.tree.bind(this);
  lastRun = this.lastRun.bind(this);
  src = vfs.src.bind(this);
  dest = vfs.dest.bind(this);
  symlink = vfs.symlink.bind(this);

  watch = (glob, opt, task) => {
    if (typeof opt === 'string' || typeof task === 'string' || Array.isArray(opt) || Array.isArray(task)) {
      throw new Error('watching ' + glob + ': watch task has to be ' + 'a function (optionally generated by using gulp.parallel ' + 'or gulp.series)');
    }

    if (typeof opt === 'function') {
      task = opt;
      opt = {};
    }

    opt = opt || {};

    let fn;
    if (typeof task === 'function') {
      fn = this.parallel(task);
    }

    return watch(glob, opt, fn);
  };
}

// Let people use this class from our instance
Gulp.prototype.Gulp = Gulp;

const inst = new Gulp();

inst.setDeprecationFlags = async (flags) => {
  const deprecation = await import('./src/deprecation.mjs');
  deprecation.setDeprecationFlags(flags);
};

(async () => {
  const deprecation = await import('./src/deprecation.mjs');

  deprecation.showDeprecationWarning();
})();

module.exports = inst;
